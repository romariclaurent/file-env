// Generated by CoffeeScript 1.7.1
(function() {
  var findEnvFile, fs, getKeyAndValueFromLine, parseEnv, setEnv, splitMultilineString;

  fs = require("fs");

  splitMultilineString = function(lines) {
    var content;
    content = void 0;
    if (typeof lines !== "string") {
      return [];
    }
    lines = lines.trim().split("\n");
    return lines.filter(function(line) {
      return line.trim().length;
    });
  };

  getKeyAndValueFromLine = function(line) {
    var key, key_value_array, value;
    key_value_array = line.match(/^\s*([\w\.\-]+)\s*=\s*(.*)?\s*$/);
    if (!key_value_array) {
      return;
    }
    key = key_value_array[1];
    value = key_value_array[2];
    if (typeof value === "undefined") {
      value = "";
    }
    if (value.charAt(0) === "\"" && value.charAt(value.length - 1) === "\"") {
      value = value.replace(/\\n/g, "\n");
    }
    value = value.replace(/(^['"]|['"]$)/g, "");
    return [key, value];
  };

  setEnv = function(env) {
    var key, value, _results;
    _results = [];
    for (key in env) {
      value = env[key];
      _results.push(process.env[key] = process.env[key] || value);
    }
    return _results;
  };

  parseEnv = function(data) {
    var keys_and_values, lines, payload;
    payload = {};
    lines = splitMultilineString(data.toString());
    keys_and_values = lines.map(getKeyAndValueFromLine).filter(Array.isArray);
    keys_and_values.forEach(function(pair) {
      var key, value;
      key = pair[0];
      value = pair[1];
      payload[key] = value.trim();
    });
    return payload;
  };

  findEnvFile = function(currentDir) {
    var directories, directory, filepath, i, j, modifier, modifiers, _i, _len;
    modifiers = (function() {
      var _i, _results;
      _results = [];
      for (j = _i = 0; _i <= 10; j = ++_i) {
        _results.push(((function() {
          var _j, _results1;
          _results1 = [];
          for (i = _j = 0; 0 <= j ? _j <= j : _j >= j; i = 0 <= j ? ++_j : --_j) {
            _results1.push("../");
          }
          return _results1;
        })()).join(""));
      }
      return _results;
    })();
    directories = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = modifiers.length; _i < _len; _i++) {
        modifier = modifiers[_i];
        _results.push(currentDir + "/" + modifier);
      }
      return _results;
    })();
    directories.unshift(currentDir);
    for (_i = 0, _len = directories.length; _i < _len; _i++) {
      directory = directories[_i];
      filepath = directory + "/.env";
      if (fs.existsSync(filepath)) {
        return filepath;
      }
    }
  };

  module.exports = function(currentDir) {
    var data, e, filepath;
    filepath = findEnvFile(currentDir);
    if (!filepath) {
      return;
    }
    console.log("loading environment variables from" + filepath);
    try {
      data = fs.readFileSync(filepath);
    } catch (_error) {
      e = _error;
      return false;
    }
    return setEnv(parseEnv(data));
  };

}).call(this);
